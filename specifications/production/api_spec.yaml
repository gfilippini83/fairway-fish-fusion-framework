openapi: 3.0.0
info:
  title: Backend API ${api_name}
  version: 1.0
paths:
  /upload_blog:
    post:
      summary: Get Lambda response
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        credentials: ${apigateway_role_arn}
        uri: ${lambda_invoke_arn}
        passthroughBehavior: when_no_match
        httpMethod: post
        type: aws_proxy
        requestParameters: {}
        requestTemplates:
          application/json: '{"body": "$input.json(\"$\" )"}'
      x-amazon-apigateway-cors:
        allowOrigin: ['*']
        allowMethods: ['*']
        allowHeaders: ['*']
      x-amazon-apigateway-method-response:
        statusCode: "200"
        responseParameters: {}
        responseModels: {}
      security:
        - Authorizer: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /get_presigned_url:
    get:
      summary: Get Lambda response
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        credentials: ${apigateway_role_arn}
        uri: ${lambda_invoke_arn}
        passthroughBehavior: when_no_match
        httpMethod: post
        type: aws_proxy
        requestParameters: {}
        requestTemplates:
          application/json: '{"body": "$input.json(\"$\" )"}'
      x-amazon-apigateway-cors:
        allowOrigin: ['*']
        allowMethods: ['*']
        allowHeaders: ['*']
      x-amazon-apigateway-method-response:
        statusCode: "200"
        responseParameters: {}
        responseModels: {}
      security:
        - Authorizer: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /get_blogs:
      get:
        summary: Get Lambda response
        responses:
          '200':
            description: Successful response
            headers:
              Access-Control-Allow-Origin:
                schema:
                  type: "string"
              Access-Control-Allow-Methods:
                schema:
                  type: "string"
              Access-Control-Allow-Headers:
                schema:
                  type: "string"
            content: {}
        x-amazon-apigateway-integration:
          credentials: ${apigateway_role_arn}
          uri: ${lambda_invoke_arn}
          passthroughBehavior: when_no_match
          httpMethod: post
          type: aws_proxy
          requestParameters: {}
          requestTemplates:
            application/json: '{"body": "$input.json(\"$\" )"}'
        x-amazon-apigateway-cors:
          allowOrigin: ['*']
          allowMethods: ['*']
          allowHeaders: ['*']
        x-amazon-apigateway-method-response:
          statusCode: "200"
          responseParameters: {}
          responseModels: {}
      options:
        responses:
          "200":
            description: "200 response"
            headers:
              Access-Control-Allow-Origin:
                schema:
                  type: "string"
              Access-Control-Allow-Methods:
                schema:
                  type: "string"
              Access-Control-Allow-Headers:
                schema:
                  type: "string"
            content: {}
        x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Headers: "'*'"
                method.response.header.Access-Control-Allow-Methods: "'*'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
          requestTemplates:
            application/json: "{\"statusCode\": 200}"
          passthroughBehavior: "when_no_match"
          type: "mock"
  /:
    get:
      summary: Get Lambda response
      responses:
        '200':
          description: Successful response test
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        credentials: ${apigateway_role_arn}
        uri: ${lambda_invoke_arn}
        passthroughBehavior: when_no_match
        httpMethod: post
        type: aws_proxy
        requestParameters: {}
        requestTemplates:
          application/json: '{"body": "$input.json(\"$\" )"}'
      x-amazon-apigateway-cors:
        allowOrigin: ['*']
        allowMethods: ['GET', 'POST', 'OPTIONS']
        allowHeaders: ['Content-Type', 'Authorization']
      x-amazon-apigateway-method-response:
        statusCode: "200"
        responseParameters: {}
        responseModels: {}
      security:
        - Authorizer: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  securitySchemes:
    Authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - arn:aws:cognito-idp:${region}:${account_id}:userpool/${user_pool_id}
