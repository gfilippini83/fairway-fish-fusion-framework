openapi: 3.0.0
info:
  title: Backend API ${api_name}
  version: 1.0
paths:
  /get_presigned_url:
    get:
      summary: Get Lambda response
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
        content: {}
      x-amazon-apigateway-integration:
        credentials: ${apigateway_role_arn}
        uri: ${lambda_invoke_arn}
        passthroughBehavior: when_no_match
        httpMethod: post
        type: aws_proxy
        requestParameters: {}
        requestTemplates:
          application/json: '{"body": "$input.json(\"$\" )"}'
      x-amazon-apigateway-cors:
        allowOrigin: ['*']
        allowMethods: ['GET', 'POST', 'OPTIONS']
        allowHeaders: ['Content-Type', 'Authorization']
      x-amazon-apigateway-method-response:
        statusCode: "200"
        responseParameters: {}
        responseModels: {}
      security:
        - Authorizer: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /:
    get:
      summary: Get Lambda response
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        credentials: ${apigateway_role_arn}
        uri: ${lambda_invoke_arn}
        passthroughBehavior: when_no_match
        httpMethod: post
        type: aws_proxy
        requestParameters: {}
        requestTemplates:
          application/json: '{"body": "$input.json(\"$\" )"}'
      x-amazon-apigateway-cors:
        allowOrigin: ['*']
        allowMethods: ['GET', 'POST', 'OPTIONS']
        allowHeaders: ['Content-Type', 'Authorization']
      x-amazon-apigateway-method-response:
        statusCode: "200"
        responseParameters: {}
        responseModels: {}
      security:
        - Authorizer: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  securitySchemes:
    Authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - arn:aws:cognito-idp:${region}:${account_id}:userpool/${user_pool_id}
